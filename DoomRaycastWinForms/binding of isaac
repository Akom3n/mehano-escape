<!DOCTYPE html>
<html lang="bg">
<head>
<meta charset="UTF-8" />
<title>Binding of Vlado</title>
<style>
  body {
    background: #000;
    margin: 0; padding: 0;
    font-family: Arial, sans-serif;
    color: white;
    overflow: hidden;
  }
  #gameCanvas {
    display: block;
    background: #222;
    margin: 20px auto;
    border: 3px solid #555;
  }
  #menuOverlay {
    position: fixed;
    top:0; left:0; right:0; bottom:0;
    background: rgba(0,0,0,0.85);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 100;
  }
  button {
    background: #444;
    border: none;
    color: white;
    font-size: 20px;
    padding: 12px 30px;
    margin: 10px;
    cursor: pointer;
    border-radius: 5px;
    transition: background 0.3s;
  }
  button:hover {
    background: #666;
  }
  label {
    font-size: 18px;
    margin: 10px 0 5px;
  }
  input[type=range] {
    width: 250px;
  }
  #restartOverlay {
    position: fixed;
    top:0; left:0; right:0; bottom:0;
    background: rgba(0,0,0,0.8);
    display: none;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 200;
    color: red;
    font-size: 40px;
  }
  #healthBar {
    position: fixed;
    top: 5px;
    left: 5px;
    width: 120px;
    height: 20px;
    border: 2px solid #fff;
    background: #222;
  }
  #healthBarInner {
    width: 100%;
    height: 100%;
    background: #f33;
  }
</style>
</head>
<body>

<div id="menuOverlay">
  <h1>Binding of Vlado</h1>
  <button id="startBtn">Start Game</button>
  <button id="settingsBtn">Settings</button>
  <div id="settingsPanel" style="display:none; margin-top:20px; text-align:center;">
    <label for="difficultyRange">Трудност (брой врагове): <span id="diffVal">3</span></label><br/>
    <input type="range" id="difficultyRange" min="1" max="5" value="3" /><br/>
    <label for="sensitivityRange">Скорост на играча: <span id="sensVal">3</span></label><br/>
    <input type="range" id="sensitivityRange" min="1" max="6" value="3" />
  </div>
</div>

<div id="restartOverlay">
  <div>GAME OVER</div>
  <button id="restartBtn" style="font-size:24px; margin-top:20px; padding:10px 20px; cursor:pointer;">Рестарт</button>
</div>

<canvas id="gameCanvas" width="640" height="480"></canvas>

<script>
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

const menuOverlay = document.getElementById("menuOverlay");
const startBtn = document.getElementById("startBtn");
const settingsBtn = document.getElementById("settingsBtn");
const settingsPanel = document.getElementById("settingsPanel");
const difficultyRange = document.getElementById("difficultyRange");
const diffVal = document.getElementById("diffVal");
const sensitivityRange = document.getElementById("sensitivityRange");
const sensVal = document.getElementById("sensVal");

const restartOverlay = document.getElementById("restartOverlay");
const restartBtn = document.getElementById("restartBtn");

let keys = {};
let player, room, door;
let gameOver = false;
let waitingForNextRoom = false;
let sensitivity = 3;
let difficulty = 3;
let superPowerActive = false;
let superPowerTimer = 0;
let superPowerCooldown = 0;
let level = 1;
let maxLevel = 5;
let animationId;

let shootDirection = null;

window.addEventListener("keydown", e => {
  keys[e.key.toLowerCase()] = true;

  // Стрелба с arrow keys
  switch(e.key) {
    case "ArrowUp":
      shootDirection = {dx: 0, dy: -1};
      break;
    case "ArrowDown":
      shootDirection = {dx: 0, dy: 1};
      break;
    case "ArrowLeft":
      shootDirection = {dx: -1, dy: 0};
      break;
    case "ArrowRight":
      shootDirection = {dx: 1, dy: 0};
      break;
  }

  // Навигация между нива
  if(e.key.toLowerCase() === "q") {
    if(level > 1 && !waitingForNextRoom && !gameOver) {
      level--;
      startRoom(level);
    }
  }
  if(e.key.toLowerCase() === "e") {
    if(level < maxLevel && !waitingForNextRoom && !gameOver) {
      level++;
      startRoom(level);
    }
  }
});

window.addEventListener("keyup", e => {
  keys[e.key.toLowerCase()] = false;

  // Спиране на стрелбата при пускане на arrow keys
  if(["ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].includes(e.key)) {
    shootDirection = null;
  }
});

function drawHealthBar(x, y, width, height, health, maxHealth) {
  const ratio = health / maxHealth;
  ctx.fillStyle = "#333";
  ctx.fillRect(x, y, width, height);
  ctx.fillStyle = "#f33";
  ctx.fillRect(x, y, width * ratio, height);
}

function drawPlayer(p) {
  ctx.fillStyle = "#58a";
  ctx.fillRect(p.x + 12, p.y + 12, p.width - 24, p.height - 14);
  ctx.beginPath();
  ctx.fillStyle = "#88c";
  ctx.arc(p.x + p.width / 2, p.y + 8, 5, 0, Math.PI * 2);
  ctx.fill();
  ctx.strokeStyle = "#88c";
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(p.x + 17, p.y + 22);
  ctx.lineTo(p.x + 7, p.y + 30);
  ctx.moveTo(p.x + p.width - 17, p.y + 22);
  ctx.lineTo(p.x + p.width - 7, p.y + 30);
  ctx.stroke();
  drawHealthBar(p.x, p.y - 10, p.width, 6, p.health, p.maxHealth);
}

function drawEnemy(e) {
  if (!e.alive) return;
  let colorBody = e.isBoss ? "#a22" : "#a55";
  let colorHead = e.isBoss ? "#c55" : "#c88";
  ctx.fillStyle = colorBody;
  ctx.fillRect(e.x + 12, e.y + 12, e.width - 24, e.height - 14);
  ctx.beginPath();
  ctx.fillStyle = colorHead;
  ctx.arc(e.x + e.width / 2, e.y + 8, 5, 0, Math.PI * 2);
  ctx.fill();
  ctx.strokeStyle = colorHead;
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(e.x + 17, e.y + 22);
  ctx.lineTo(e.x + 7, e.y + 30);
  ctx.moveTo(e.x + e.width - 17, e.y + 22);
  ctx.lineTo(e.x + e.width - 7, e.y + 30);
  ctx.stroke();
  drawHealthBar(e.x, e.y - 10, e.width, 6, e.health, e.maxHealth);
}

function drawBullet(b) {
  ctx.fillStyle = "white";
  ctx.beginPath();
  ctx.arc(b.x + b.width / 2, b.y + b.height / 2, b.width / 2, 0, Math.PI * 2);
  ctx.fill();
}

function drawDoor(door) {
  if (!door.visible) return;
  ctx.fillStyle = door.color;
  ctx.fillRect(door.x, door.y, door.width, door.height);
  ctx.fillStyle = "#333";
  ctx.fillRect(door.x + 10, door.y + 10, 30, 30);
}

function createPlayer() {
  return {
    x: canvas.width / 2 - 20,
    y: canvas.height / 2 - 20,
    width: 40,
    height: 40,
    speed: sensitivity,
    bullets: [],
    shootCooldown: 0,
    health: 3,
    maxHealth: 3,
    invulnerable: 0,
  };
}

function createEnemy(x, y, isBoss = false) {
  let size = isBoss ? 60 : 40;
  return {
    x, y,
    width: size,
    height: size,
    speed: isBoss ? 0.8 : 1.2,
    alive: true,
    health: isBoss ? 4 : 2,
    maxHealth: isBoss ? 4 : 2,
    isBoss: isBoss,
    spawnTimer: 0,
  };
}

function createRoom(level) {
  const enemies = [];
  if (level === maxLevel) {
    // Бос ниво
    let ex = Math.random() * (canvas.width - 70);
    let ey = Math.random() * (canvas.height - 70);
    enemies.push(createEnemy(ex, ey, true));
  } else {
    for(let i=0; i < difficulty; i++) {
      let ex, ey;
      do {
        ex = Math.random() * (canvas.width - 50);
        ey = Math.random() * (canvas.height - 50);
      } while (Math.abs(ex - canvas.width/2) < 100 && Math.abs(ey - canvas.height/2) < 100);
      enemies.push(createEnemy(ex, ey));
    }
  }
  return {
    enemies,
  };
}

function createDoor() {
  return {
    width: 50,
    height: 70,
    x: canvas.width - 70,
    y: canvas.height / 2 - 35,
    color: "#a67c00",
    visible: false
  };
}

const directions = [
  {dx: 1, dy:0},
  {dx: -1, dy:0},
  {dx: 0, dy:1},
  {dx: 0, dy:-1},
  {dx: 1, dy:1},
  {dx: 1, dy:-1},
  {dx: -1, dy:1},
  {dx: -1, dy:-1},
];

function movePlayer() {
  if (keys["w"]) player.y -= player.speed;
  if (keys["s"]) player.y += player.speed;
  if (keys["a"]) player.x -= player.speed;
  if (keys["d"]) player.x += player.speed;

  player.x = Math.max(0, Math.min(canvas.width - player.width, player.x));
  player.y = Math.max(0, Math.min(canvas.height - player.height, player.y));
}

function shootBullet(dx, dy) {
  player.bullets.push({
    x: player.x + player.width / 2 - 5,
    y: player.y + player.height / 2 - 5,
    width: 10,
    height: 10,
    dx: dx * 5,
    dy: dy * 5,
  });
}

function moveBullets() {
  player.bullets = player.bullets.filter(b => {
    b.x += b.dx;
    b.y += b.dy;
    if(b.x < 0 || b.x > canvas.width || b.y < 0 || b.y > canvas.height) return false;
    return true;
  });
}

function enemiesMove() {
  room.enemies.forEach(enemy => {
    if (!enemy.alive) return;
    let dx = player.x - enemy.x;
    let dy = player.y - enemy.y;
    let dist = Math.sqrt(dx*dx + dy*dy);
    if (dist > 0) {
      enemy.x += enemy.speed * dx / dist;
      enemy.y += enemy.speed * dy / dist;
    }
    enemy.x = Math.max(0, Math.min(canvas.width - enemy.width, enemy.x));
    enemy.y = Math.max(0, Math.min(canvas.height - enemy.height, enemy.y));
  });
}

function enemyShootSpawner(enemy) {
  if (!enemy.isBoss || !enemy.alive) return;
  enemy.spawnTimer += 1/60;
  if(enemy.spawnTimer >= 5) {
    enemy.spawnTimer = 0;
    // spawn малък враг около боса
    let angle = Math.random() * Math.PI * 2;
    let dist = 60;
    let ex = enemy.x + enemy.width/2 + Math.cos(angle)*dist - 20;
    let ey = enemy.y + enemy.height/2 + Math.sin(angle)*dist - 20;
    room.enemies.push(createEnemy(ex, ey, false));
  }
}

function collisionRect(a, b) {
  return !(a.x + a.width < b.x || a.x > b.x + b.width ||
           a.y + a.height < b.y || a.y > b.y + b.height);
}

function checkCollisions() {
  // Врагове vs играч
  room.enemies.forEach(enemy => {
    if (!enemy.alive) return;
    if(collisionRect(player, enemy) && player.invulnerable <= 0) {
      player.health--;
      player.invulnerable = 1; // 1 секунда без урон
      if(player.health <= 0) {
        gameOver = true;
        showGameOver();
      }
    }
  });

  // Куршуми vs врагове
  player.bullets.forEach(bullet => {
    room.enemies.forEach(enemy => {
      if (!enemy.alive) return;
      if(collisionRect(bullet, enemy)) {
        enemy.health--;
        if(enemy.health <= 0) enemy.alive = false;
        bullet.x = -1000; // махаме куршума
      }
    });
  });
}

function showGameOver() {
  restartOverlay.style.display = "flex";
}

function resetGame() {
  level = 1;
  player = createPlayer();
  room = createRoom(level);
  door = createDoor();
  door.visible = false;
  gameOver = false;
  restartOverlay.style.display = "none";
  waitingForNextRoom = false;
  superPowerCooldown = 0;
  superPowerTimer = 0;
  animationId = requestAnimationFrame(gameLoop);
}

function startRoom(levelNum) {
  room = createRoom(levelNum);
  door.visible = false;
  player.x = canvas.width/2 - player.width/2;
  player.y = canvas.height/2 - player.height/2;
  player.bullets = [];
  waitingForNextRoom = false;
  superPowerTimer = 0;
  superPowerActive = false;
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  drawPlayer(player);

  room.enemies.forEach(drawEnemy);
  player.bullets.forEach(drawBullet);
  drawDoor(door);

  // Текст ниво и здраве
  ctx.fillStyle = "white";
  ctx.font = "20px Arial";
  ctx.fillText("Ниво: " + level + "/" + maxLevel, 10, 25);
  ctx.fillText("Здраве: " + player.health + "/" + player.maxHealth, 10, 50);

  if(superPowerCooldown > 0){
    ctx.fillStyle = "#ff0";
    ctx.fillText("Супер сила cooldown: " + superPowerCooldown.toFixed(1), 400, 25);
  }
  if(superPowerActive){
    ctx.fillStyle = "#0f0";
    ctx.fillText("Супер сила АКТИВНА!", 400, 50);
  }
}

function update(delta) {
  if(gameOver) return;

  if(player.invulnerable > 0){
    player.invulnerable -= delta;
  }

  movePlayer();

  // Стрелба с arrow keys + space за супер сила
  if(shootDirection && player.shootCooldown <= 0) {
    shootBullet(shootDirection.dx, shootDirection.dy);
    player.shootCooldown = 0.3;
  }

  // Супер сила с Shift (shiftLeft, shiftRight)
  if((keys["shift"] || keys["shiftleft"] || keys["shiftright"]) && superPowerCooldown <= 0 && !superPowerActive){
    superPowerActive = true;
    superPowerTimer = 3; // трае 3 сек
    superPowerCooldown = 20;
  }

  if(superPowerActive){
    superPowerTimer -= delta;
    if(superPowerTimer > 0){
      // На всеки 0.2 сек да пускаме 3 слаби куршума във всички посоки
      if(!superPowerShootTimer) superPowerShootTimer = 0;
      superPowerShootTimer -= delta;
      if(superPowerShootTimer <= 0){
        superPowerShootTimer = 0.2;
        directions.forEach(d => {
          shootBullet(d.dx * 0.6, d.dy * 0.6);
          shootBullet(d.dx * 1, d.dy * 1);
          shootBullet(d.dx * 1.5, d.dy * 1.5);
        });
      }
    } else {
      superPowerActive = false;
      superPowerShootTimer = 0;
    }
  }

  if(superPowerCooldown > 0){
    superPowerCooldown -= delta;
  }

  if(player.shootCooldown > 0) player.shootCooldown -= delta;

  moveBullets();
  enemiesMove();

  // Бос ражда малки врагове
  room.enemies.forEach(enemy => {
    if(enemy.isBoss && enemy.alive){
      enemyShootSpawner(enemy);
    }
  });

  checkCollisions();

  // Ако всички врагове умрът -> врата се появява
  if(room.enemies.every(e => !e.alive)){
    door.visible = true;
  }

  // Ако играчът е вратата - преминаване на следващо ниво
  if(door.visible && collisionRect(player, door) && !waitingForNextRoom){
    waitingForNextRoom = true;
    level++;
    if(level > maxLevel){
      alert("Поздравления! Мина всички нива!");
      level = maxLevel;
      waitingForNextRoom = false;
      door.visible = false;
    } else {
      // Регенерираме 1 здраве, максимум до maxHealth
      player.health = Math.min(player.health + 1, player.maxHealth);
      startRoom(level);
    }
  }
}

let lastTime = 0;

function gameLoop(timestamp=0){
  if(!lastTime) lastTime = timestamp;
  let delta = (timestamp - lastTime)/1000;
  lastTime = timestamp;

  update(delta);
  draw();

  if(!gameOver){
    animationId = requestAnimationFrame(gameLoop);
  }
}

startBtn.onclick = () => {
  difficulty = parseInt(difficultyRange.value);
  sensitivity = parseInt(sensitivityRange.value);
  diffVal.textContent = difficulty;
  sensVal.textContent = sensitivity;

  menuOverlay.style.display = "none";

  player = createPlayer();
  player.speed = sensitivity;
  room = createRoom(level);
  door = createDoor();
  door.visible = false;
  gameOver = false;
  waitingForNextRoom = false;
  superPowerCooldown = 0;
  superPowerTimer = 0;
  animationId = requestAnimationFrame(gameLoop);
};

settingsBtn.onclick = () => {
  if(settingsPanel.style.display === "none"){
    settingsPanel.style.display = "block";
  } else {
    settingsPanel.style.display = "none";
  }
};

difficultyRange.oninput = () => {
  diffVal.textContent = difficultyRange.value;
};
sensitivityRange.oninput = () => {
  sensVal.textContent = sensitivityRange.value;
};

restartBtn.onclick = () => {
  restartOverlay.style.display = "none";
  resetGame();
};

</script>

</body>
</html>
